#1. Fuzzy Matching
#Handles typos in user queries by comparing the input against a predefined list of cities/states.

#python
from thefuzz import process

def fuzzy_match_location(query, locations_list):
    best_match, score = process.extractOne(query, locations_list)
    if score >= 70:  # Threshold for similarity
        return best_match
    return None

#2. Geocoding
#Retrieves latitude and longitude for the corrected location using OpenStreetMap Nominatim API, with caching to improve performance.

#python
import requests

geocode_cache = {}

def get_coordinates(location_name):
    if location_name.lower() in geocode_cache:
        return geocode_cache[location_name.lower()]
    
    url = f"https://nominatim.openstreetmap.org/search?q={location_name}&format=json"
    response = requests.get(url)
    if response.status_code == 200 and response.json():
        data = response.json()[0]
        coordinates = (float(data['lat']), float(data['lon']))
        geocode_cache[location_name.lower()] = coordinates
        return coordinates
    return None
#3. Distance Calculation
#Uses the Haversine formula to calculate distances between two geographical points.

#python
import math

def haversine(lat1, lon1, lat2, lon2):
    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    r = 6371  # Earth radius in kilometers
    return c * r

#3. API Endpoint
#Combines all components to handle user queries and return nearby properties.

from flask import Flask, request, jsonify

app = Flask(__name__)

# List of properties with their coordinates
properties = [
    {"property": "Moustache Udaipur Luxuria", "latitude": 24.57799888, "longitude": 73.68263271},
    {"property": "Moustache Udaipur", "latitude": 24.58145726, "longitude": 73.68223671},
    {"property": "Moustache Udaipur Verandah", "latitude": 24.58350565, "longitude": 73.68120777},
    {"property": "Moustache Jaipur", "latitude": 27.29124839, "longitude": 75.89630143},
    {"property": "Moustache Jaisalmer", "latitude": 27.20578572, "longitude": 70.85906998},
    {"property": "Moustache Jodhpur", "latitude": 26.30365556, "longitude": 73.03570908},
    {"property": "Moustache Agra", "latitude": 27.26156953, "longitude": 78.07524716},
    {"property": "Moustache Delhi", "latitude": 28.61257139, "longitude": 77.28423582},
    {"property": "Moustache Rishikesh Luxuria", "latitude": 30.13769036, "longitude": 78.32465767},
    {"property": "Moustache Rishikesh Riverside Resort", "latitude": 30.10216117, "longitude": 78.38458848},
    {"property": "Moustache Hostel Varanasi", "latitude": 25.2992622, "longitude": 82.99691388},
    {"property": "Moustache Goa Luxuria", "latitude": 15.6135195, "longitude": 73.75705228},
    {"property": "Moustache Koksar Luxuria", "latitude": 32.4357785, "longitude": 77.18518717},
    {"property": "Moustache Daman", "latitude": 20.41486263, "longitude": 72.83282455},
    {"property": "Panarpani Retreat", "latitude": 22.52805539, "longitude": 78.43116291},
    {"property": "Moustache Pushkar", "latitude": 26.48080513, "longitude": 74.5613783},
    {"property": "Moustache Khajuraho", "latitude": 24.84602104, "longitude": 79.93139381},
    {"property": "Moustache Manali", "latitude": 32.28818695, "longitude": 77.17702523},
    {"property": "Moustache Bhimtal Luxuria", "latitude": 29.36552248, "longitude": 79.53481747},
    {"property": "Moustache Srinagar", "latitude": 34.11547314, "longitude": 74.88701741},
    {"property": "Moustache Ranthambore Luxuria", "latitude": 26.05471373, "longitude": 76.42953726},
    {"property": "Moustache Coimbatore", "latitude": 11.02064612, "longitude": 76.96293531},
    {"property": "Moustache Shoja", "latitude": 31.56341267, "longitude": 77.36733331}
]

@app.route('/find_properties', methods=['GET'])
def find_properties():
    query = request.args.get('query', '')
    
    if not query:
        return jsonify({"error":"No location query provided"}),400

